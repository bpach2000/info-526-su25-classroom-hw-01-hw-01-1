---
title: "HW 01"
author: "Brooke Pacheco"
date: "2025-05-28"
description: "Homework 1"
format: 
  html:
    embed-resources: true
toc: true
---

## 0 - Setup

```{r setup}
# load packages
library(tidyverse)
library(glue)
library(scales)
library(here)
library(countdown)
library(ggthemes)
library(gt)
library(palmerpenguins)
library(openintro)
library(ggrepel)
library(patchwork)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)

message("Find Rtools? ", pkgbuild::find_rtools())


if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(tidyverse,
               glue,
               scales,
               ggthemes) 

devtools::install_github("tidyverse/dsbox")

```

## 1 - Road traffic accidents in Edinburgh

```{r Road traffic accidents in Edinburgh}
# Read in data from accidents file
accidents <- read_csv(here(
  "data" ,"accidents.csv"))

# Create a new column - wrangle the data
accidents_wrangle <- accidents |>
  mutate(
    week = case_when(
      day_of_week %in% c("Saturday", "Sunday") ~ "Weekend",
      TRUE ~ "Weekday"
    ),
    week = fct_relevel(week, "weekend", "weekday")
  ) 

# Create the plot
ggplot(accidents_wrangle, aes(x = time, fill = severity, group = severity)) +
  geom_density(color = "black", alpha = 0.5) +
  scale_fill_manual(values = c("#AA93B0", "#9ECAC8", "#FEF39F")) +
  labs(
    x = "Time of day",
    y = "Density",
    title = "Number of accidents throughout the day",
    subtitle = "By day of the week and severity",
    fill = "Severity"
  ) + 
  facet_wrap(~ week, nrow = 2) +
  theme_minimal(base_size = 11)


```
Description TODO\n


## 2 - NYC marathon winners
# 2a.
```{r (2a)}
# Read in data from nyc marathon file
marathon <- read_csv(here(
  "data" ,"nyc_marathon.csv"))

# Create the histogram plot
ggplot(marathon, aes(x = time_hrs)) +
  geom_histogram(binwidth = 0.1) +
  labs (
    title = "Histogram of all runners in data set",
    x = "Time in hours",
    y = "Count"
  ) +
  theme_minimal(base_size = 11)

# Create the box plot
ggplot(marathon, aes(x = time_hrs)) +
  geom_boxplot(outlier.size = 2) +
  labs (
    title = "Box plot of all runners in data set",
    x = "Division",
    y = "Time in hours"
  ) +
  theme_minimal(base_size = 11)
```
The histogram makes it easier to gauge the total number of runners and to understand how many runners finished within each time range. It provides a clear visual representation of the distribution of finish times across the dataset. In contrast, the boxplot does not clearly show the quantity of runners, but it is effective for identifying trends such as the median finish time and any outliers.

# 2b.
```{r (2b)}
# Create the histogram plot
ggplot(marathon, aes(x = time_hrs, fill = division)) +
  geom_histogram(binwidth = 0.1) +
  scale_fill_manual(
    values = c("Men" = "cornsilk4", "Women" = "deepskyblue3")
  ) +
  labs (
    title = "Histogram of all runners in data set",
    x = "Time in hours",
    y = "Count",
    fill = "Division"
  ) +
  theme_minimal(base_size = 11)

# Create the box plot
ggplot(marathon, aes(x = division, y = time_hrs, fill = division)) +
  geom_boxplot(outlier.size = 2) +
  scale_fill_manual(
    values = c("Men" = "cornsilk4", "Women" = "deepskyblue3")
  ) +
  labs (
    title = "Box plot of all runners in data set",
    x = "Division",
    y = "Time in hours",
    fill = "Division"
  ) +
  theme_minimal(base_size = 11)
```
Although not required, I recreated the same plot updates for the histogram as a practice exercise.
The boxplot, with the fill parameter set to division (men or women), provides a clear visual comparison of performance based on gender. It shows that, in general, men tend to finish before the 2.25-hour mark, while women typically finish closer to or just after the 2.5-hour mark. The outliers for the men's division extend slightly beyond 2.5 hours, whereas the women's outliers appear after the 3-hour mark.

# 2c.
TODO

# 2d.
```{r (2d)}
# Read in data from nyc marathon file
marathon <- read_csv(here(
  "data" ,"nyc_marathon.csv")) |>
  mutate(
    decade_raced = (year %/% 10) * 10,
    decade_raced_cat = case_when(
      decade_raced <= 1970 ~ "1970 or before",
      decade_raced >= 2020 ~ "2020 or after",
      TRUE ~ as.character(decade_raced)
    )
  )

# Add new variable
marathon |>
  count(decade_raced) |>
  glimpse()

# Create the box plot
ggplot(marathon, aes(x = decade_raced_cat, y = time_hrs, fill = division)) +
  geom_boxplot(outlier.size = 2) +
  scale_fill_manual(
    values = c("Men" = "cornsilk4", "Women" = "deepskyblue3")
  ) +
  labs (
    title = "Marathon Finish Times by Decade and Division",
    x = "Year",
    y = "Time in Hours",
    fill = "Division"
  ) +
  theme_minimal(base_size = 11)
```
This plot gives us a better idea of performance for men and womens race times based on 
years (or decades).TODO

## 3 - US counties

# 3a
```{r (3a)}
ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017))

```
The code displays a scatter plot of median education versus median household income. It also overlays a box plot of population in 2017 by smoking ban status on the same graph. Although the code runs without errors, it combines two unrelated visualizations on a single plot, which makes the results confusing and difficult to interpret.

In addition, both layers use the same color scheme, making it hard to distinguish between the two plot types. Next, the y-axis must represent either income or population, but not both. The visual is misleading. Lastly, there is a category labeled 'NA' on the x-axis, from smoking_ban, that doesn't represent valid data and should be removed or handled.

# 3b
It is easier to compare poverty levels in the first plot, where the faceting variables are displayed vertically or in rows. From this plot, we observe that individuals who are older, more educated, and have lower poverty levels are more likely to be homeowners. This layout makes patterns easier to identify and shows clearer comparisons across groups.

In contrast, the version where faceting variables are displayed horizontally by column can be misleading. It gives the impression that individuals with only a high school diploma or some college experience are more likely to own homes at a younger age, which is not necessarily supported by the data. This highlights the importance of intentional facet layout. Row based faceting displays better comparisons when there are multiple categorical groupings.

# 3c
```{r (3c)}
# Plot A
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) +
  labs (
    title = "Plot A",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11)

# Plot B 
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) +
  geom_smooth(aes(x = homeownership, y = poverty), color = "blue", se = FALSE) +
  labs (
    title = "Plot B",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11) 

# Plot C 
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) +
  geom_smooth(aes(x = homeownership, y = poverty, group = metro), color = "limegreen", se = FALSE, show.legend = FALSE) +
  labs (
    title = "Plot C",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11) 

# Plot D
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_smooth(aes(x = homeownership, y = poverty, group = metro), color = "blue", se = FALSE, show.legend = FALSE) +
  geom_point(aes(x = homeownership, y = poverty)) +
  labs (
    title = "Plot D",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11)

# Plot E
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  geom_smooth(aes(x = homeownership, y = poverty, linetype = metro), color = "blue", se = FALSE)
  labs (
    title = "Plot E",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11) 

# Plot F
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  geom_smooth(aes(x = homeownership, y = poverty, color = metro), se = FALSE)
  labs (
    title = "Plot F",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11) 
  
# Plot G
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  geom_smooth(aes(x = homeownership, y = poverty), color = "blue", se = FALSE) +
  labs (
    title = "Plot G",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11) 
  
# Plot H
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty, color = metro)) +
  labs (
    title = "Plot H",
  ) +
  theme_gray(base_size = 11)
  theme_minimal(base_size = 11) 
```


## 4 - Rental apartments in SF

## 5 - Napoleonâ€™s march.
